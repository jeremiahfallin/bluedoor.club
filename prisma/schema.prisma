generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  discriminator String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  clubId        String?
  accounts      Account[]
  sessions      Session[]
  club          Club?     @relation(fields: [clubId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Club {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  invite    Invite[]
  teams     Team[]
  users     User[]
}

model Invite {
  id         String    @id @default(uuid())
  clubId     String?
  expiresAt  DateTime?
  redeemedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  club       Club?     @relation(fields: [clubId], references: [id])
}

model Team {
  id                String         @id @default(uuid())
  name              String
  slug              String
  leagueId          String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  clubId            String?
  availability      Availability[]
  matchesAsBlueTeam Match[]        @relation("blueTeam")
  matchesAsRedTeam  Match[]        @relation("redTeam")
  club              Club?          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  league            League         @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  player            Player[]
  stat              Stat[]

  @@unique([leagueId, name])
  @@unique([leagueId, slug])
}

model Player {
  id        String   @id @default(uuid())
  name      String
  handle    String?
  teamId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  stat      Stat[]

  @@unique([teamId, name])
  @@unique([teamId, handle])
}

model Stat {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  match     Match    @relation(fields: [matchId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  playerId  String
  character String?
  stock     Int?
  win       Boolean
  matchId   String
}

model Game {
  id      String   @id @default(uuid())
  name    String   @unique
  slug    String   @unique
  leagues League[]
}

model League {
  id               String         @id @default(uuid())
  name             String
  slug             String         @unique
  seasonStart      DateTime       @default(now())
  seasonEnd        DateTime       @default(now())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  gameId           String
  minimumMatchTime Int?
  availability     Availability[]
  game             Game           @relation(fields: [gameId], references: [id])
  matches          Match[]
  teams            Team[]
}

model Match {
  id         String   @id @default(uuid())
  blueTeamId String
  redTeamId  String
  blueScore  Int?
  redScore   Int?
  date       DateTime
  leagueId   String
  isPlayoff  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  blueTeam   Team     @relation("blueTeam", fields: [blueTeamId], references: [id])
  league     League   @relation(fields: [leagueId], references: [id])
  redTeam    Team     @relation("redTeam", fields: [redTeamId], references: [id])
  stat       Stat[]
}

model Availability {
  id        String           @id @default(uuid())
  teamId    String
  leagueId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  league    League           @relation(fields: [leagueId], references: [id])
  team      Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  times     AvailableTimes[]

  @@unique([teamId, leagueId])
}

model AvailableTimes {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  availabilityId String
  endTime        DateTime
  startTime      DateTime
  availability   Availability @relation(fields: [availabilityId], references: [id])
}

enum Role {
  USER
  ADMIN
}
