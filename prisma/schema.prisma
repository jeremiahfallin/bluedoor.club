// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String
  discriminator String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  club      Club?    @relation(fields: [clubId], references: [id])
  clubId    String?

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Club {
  id    String @id @default(uuid())
  name  String
  slug  String @unique
  users User[]
  teams Team[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  invite    Invite[]
}

model Invite {
  id         String    @id @default(uuid())
  club       Club?     @relation(fields: [clubId], references: [id])
  clubId     String? // Can link to a specific club if needed
  expiresAt  DateTime?
  redeemedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Team {
  id       String @id @default(uuid())
  name     String
  slug     String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String

  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  matchesAsBlueTeam Match[]        @relation(name: "blueTeam")
  matchesAsRedTeam  Match[]        @relation(name: "redTeam")
  club              Club?          @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubId            String?
  availability      Availability[]
}

model Game {
  id      String   @id @default(uuid())
  name    String   @unique
  slug    String   @unique
  leagues League[]
}

model League {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  seasonStart DateTime @default(now())
  seasonEnd   DateTime @default(now())
  teams       Team[]

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  matches          Match[]
  game             Game           @relation(fields: [gameId], references: [id])
  gameId           String
  availability     Availability[]
  minimumMatchTime Int?
}

model Match {
  id         String   @id @default(uuid())
  blueTeam   Team     @relation(name: "blueTeam", fields: [blueTeamId], references: [id])
  blueTeamId String
  redTeam    Team     @relation(name: "redTeam", fields: [redTeamId], references: [id])
  redTeamId  String
  blueScore  Int?
  redScore   Int?
  date       DateTime
  league     League   @relation(fields: [leagueId], references: [id])
  leagueId   String
  isPlayoff  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Availability {
  id       String           @id @default(uuid())
  team     Team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  league   League           @relation(fields: [leagueId], references: [id])
  leagueId String
  times    AvailableTimes[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([teamId, leagueId])
}

model AvailableTimes {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  availability   Availability @relation(fields: [availabilityId], references: [id])
  availabilityId String
  startTime      DateTime
  endTime        DateTime
}
